[{"path":[]},{"path":"https://cesaraustralia.github.io/seizer/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"CC0 1.0 Universal","title":"CC0 1.0 Universal","text":"CREATIVE COMMONS CORPORATION LAW FIRM PROVIDE LEGAL SERVICES. DISTRIBUTION DOCUMENT CREATE ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES INFORMATION “-” BASIS. CREATIVE COMMONS MAKES WARRANTIES REGARDING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER, DISCLAIMS LIABILITY DAMAGES RESULTING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER.","code":""},{"path":"https://cesaraustralia.github.io/seizer/LICENSE.html","id":"statement-of-purpose","dir":"","previous_headings":"","what":"Statement of Purpose","title":"CC0 1.0 Universal","text":"laws jurisdictions throughout world automatically confer exclusive Copyright Related Rights (defined ) upon creator subsequent owner(s) (, “owner”) original work authorship /database (, “Work”). Certain owners wish permanently relinquish rights Work purpose contributing commons creative, cultural scientific works (“Commons”) public can reliably without fear later claims infringement build upon, modify, incorporate works, reuse redistribute freely possible form whatsoever purposes, including without limitation commercial purposes. owners may contribute Commons promote ideal free culture production creative, cultural scientific works, gain reputation greater distribution Work part use efforts others. /purposes motivations, without expectation additional consideration compensation, person associating CC0 Work (“Affirmer”), extent owner Copyright Related Rights Work, voluntarily elects apply CC0 Work publicly distribute Work terms, knowledge Copyright Related Rights Work meaning intended legal effect CC0 rights. Copyright Related Rights. Work made available CC0 may protected copyright related neighboring rights (“Copyright Related Rights”). Copyright Related Rights include, limited , following: right reproduce, adapt, distribute, perform, display, communicate, translate Work; moral rights retained original author(s) /performer(s); publicity privacy rights pertaining person’s image likeness depicted Work; rights protecting unfair competition regards Work, subject limitations paragraph 4(), ; rights protecting extraction, dissemination, use reuse data Work; database rights (arising Directive 96/9/EC European Parliament Council 11 March 1996 legal protection databases, national implementation thereof, including amended successor version directive); similar, equivalent corresponding rights throughout world based applicable law treaty, national implementations thereof. Waiver. greatest extent permitted , contravention , applicable law, Affirmer hereby overtly, fully, permanently, irrevocably unconditionally waives, abandons, surrenders Affirmer’s Copyright Related Rights associated claims causes action, whether now known unknown (including existing well future claims causes action), Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“Waiver”). Affirmer makes Waiver benefit member public large detriment Affirmer’s heirs successors, fully intending Waiver shall subject revocation, rescission, cancellation, termination, legal equitable action disrupt quiet enjoyment Work public contemplated Affirmer’s express Statement Purpose. Public License Fallback. part Waiver reason judged legally invalid ineffective applicable law, Waiver shall preserved maximum extent permitted taking account Affirmer’s express Statement Purpose. addition, extent Waiver judged Affirmer hereby grants affected person royalty-free, non transferable, non sublicensable, non exclusive, irrevocable unconditional license exercise Affirmer’s Copyright Related Rights Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“License”). License shall deemed effective date CC0 applied Affirmer Work. part License reason judged legally invalid ineffective applicable law, partial invalidity ineffectiveness shall invalidate remainder License, case Affirmer hereby affirms () exercise remaining Copyright Related Rights Work (ii) assert associated claims causes action respect Work, either case contrary Affirmer’s express Statement Purpose. Limitations Disclaimers. trademark patent rights held Affirmer waived, abandoned, surrendered, licensed otherwise affected document. Affirmer offers Work -makes representations warranties kind concerning Work, express, implied, statutory otherwise, including without limitation warranties title, merchantability, fitness particular purpose, non infringement, absence latent defects, accuracy, present absence errors, whether discoverable, greatest extent permissible applicable law. Affirmer disclaims responsibility clearing rights persons may apply Work use thereof, including without limitation person’s Copyright Related Rights Work. , Affirmer disclaims responsibility obtaining necessary consents, permissions rights required use Work. Affirmer understands acknowledges Creative Commons party document duty obligation respect CC0 use Work.","code":""},{"path":"https://cesaraustralia.github.io/seizer/articles/ggplot2-tutorial.html","id":"the-grammar-of-graphics","dir":"Articles","previous_headings":"","what":"The grammar of graphics","title":"ggplot2 Tutorial","text":"key using ggplot2 understanding syntax, based Hadley Wickham’s layered grammar graphics framework. want read , links reading section. purposes though, ’ll just focus components make ggplot object, set . representation structure ggplot object (adapted ggplot2 documentation):  can see, key word layered grammar graphics behind ggplot2 layered. component passed separately function, add one another create complete plot. explain recreating following figure stage stage:","code":""},{"path":"https://cesaraustralia.github.io/seizer/articles/ggplot2-tutorial.html","id":"data","dir":"Articles","previous_headings":"The grammar of graphics","what":"1. Data","title":"ggplot2 Tutorial","text":"basis plot data underlying . data consist dataframe, want visualise least one dimension, column. example, can view iris dataset comes together ggplot2 data sepal petal dimensions different species iris flowers. Irises, way, awesome take opportunity google photos irises. ’m particular fan Iris petrana. Anyway, moving ! can generate ggplot object passing data ggplot2::ggplot() function. can done either using data argument ggplot function:  piping, ’re comfortable using functionality:  Note cases, end empty plot. provided ggplot2 data, provided information actually represent data plot. created ggplot object, can now add using functions.","code":"head(iris) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6          5.4         3.9          1.7         0.4  setosa p <- ggplot(data = iris)  p p <- iris %>% ggplot()  p"},{"path":"https://cesaraustralia.github.io/seizer/articles/ggplot2-tutorial.html","id":"mapping","dir":"Articles","previous_headings":"The grammar of graphics","what":"2. Mapping","title":"ggplot2 Tutorial","text":"next step decide dimension, dimensions, want plot. words, define axes plot, whether dimensions encoded size, shape, colour, etc. done using ggplot2::aes() function, defines list aesthetic mappings, passed ggplot object using mapping argument. translate data graphics system, “mapping” column (.e., dimension data) onto graphical element (aesthetic). , example, want plot petal length sepal length, pass axes ggplot object:  plot coming along - now axes, see ranges axes correspond range values column dataframe. plot still empty.","code":"p <- ggplot(iris, aes(x = Sepal.Length, y = Petal.Length))  p"},{"path":"https://cesaraustralia.github.io/seizer/articles/ggplot2-tutorial.html","id":"layers","dir":"Articles","previous_headings":"The grammar of graphics","what":"3. Layers","title":"ggplot2 Tutorial","text":"Layers display mapped data previous step kind graphical representation. quote ggplot documentation: Every layer consists three important parts: geometry determines data displayed, points, lines, rectangles. statistical transformation may compute new variables data affect data displayed. position adjustment primarily determines piece data displayed. Layers constructed using either geom_*() stat_*() functions. focus geoms, geometric objects want data visualised. can points, bars, lines, boxes, etc. many different geoms choose - work data. example, works fine:  throws error: ’ll notice error mentions something called ggplot2::stat_count(). statistical transformation - determines whether want show kind statistical measure underlying data, example count. also mean, spread, confidence intervals, etc. geoms underlying default stat values, define statistical transformation use data layer. combinations just don’t make sense. , first attempt worked ggplot2::geom_point() default uses stat = \"identity\" - means data transformed, datum shown point x y coordinate. , ggplot2::geom_bar() default uses stat = \"count\", doesn’t work two dimensions. statistical transformation counts number unique values column, really works single dimension, example barplot representing histogram:  However, geoms stat transformations identity can work neatly two dimensions. example, want add trend line scatterplot, can use ggplot2::geom_smooth(), shows central tendency confidence intervals y variable along range x axis. Sounds complicated, really - ’s just output model y predicted x:  default, ggplot2::geom_smooth() fits non-linear model (either loess gam depending sample size data), can constrain show linear regression - means now created scatterplot trend line linear model form y ~ x. construct model running lm(Petal.Length ~ Sepal.Length, data = iris):  important thing note - geom_*() function defines new layer. means can potentially use different aesthetic mappings, even different data, new geom. explore means, ’ll start assigning aesthetic mapping colour:  ’ve now mapped colour aesthetic onto column Species, unique value Species gets colour. applies geoms, passed colour aesthetic ggplot2::ggplot() function. Hence, get three different regression lines, mapping colour discrete variable, also implicitly passed grouping variable - .e., statistical transformation underlying ggplot2::geom_smooth() applied separately group. However, also map aesthetic variable single layer, passing one geom_*() :  One important thing note unlike previous plot, regression line shared. colour aesthetic mapping passed ggplot2::geom_smooth(), doesn’t include grouping variable statistical transformation. can pass separately ggplot2::geom_smooth() using group aesthetic mapping, still get separate regression lines without individual colours:  just example strength layered structure ggplot2. changing aesthetic mappings even data arguments different layers, can plot data many interesting ways. expert ggplot2 users, can use geom_*() unconventional ways complex data vis changing stat value, passing stat_*() function adjusting geom argument. beyond scope tutorial, feel free experiment ’re interested. Finally, matter position. Just statistical transformations, geom_*() function comes default position argument. won’t get , know can useful tool visualisations nudging components sides overlapping - can especially important plots like boxplots barplots. point, everything need create simple plot. ’s lot can adjusting next four layers grammar graphics cake.","code":"p + geom_point() p + geom_bar() #> Error in `geom_bar()`: #> ! Problem while computing stat. #> ℹ Error occurred in the 1st layer. #> Caused by error in `setup_params()`: #> ! `stat_count()` must only have an x or y aesthetic. ggplot(iris, aes(x = Sepal.Length)) + geom_bar() p <- p + geom_point()  p + geom_smooth() #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x' p <- p + geom_smooth(method = \"lm\")  p #> `geom_smooth()` using formula = 'y ~ x' p <- ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, colour = Species)) + geom_point() + geom_smooth(method = \"lm\")  p #> `geom_smooth()` using formula = 'y ~ x' ggplot(iris, aes(x = Sepal.Length, y = Petal.Length)) + geom_point(aes(colour = Species)) + geom_smooth(method = \"lm\") #> `geom_smooth()` using formula = 'y ~ x' ggplot(iris, aes(x = Sepal.Length, y = Petal.Length)) + geom_point(aes(colour = Species)) + geom_smooth(aes(group = Species), method = \"lm\") #> `geom_smooth()` using formula = 'y ~ x'"},{"path":"https://cesaraustralia.github.io/seizer/articles/ggplot2-tutorial.html","id":"scales","dir":"Articles","previous_headings":"The grammar of graphics","what":"4. Scales","title":"ggplot2 Tutorial","text":"Scales component refers scaling values plot, using specific scales represent multiple values range. One basic usage make changes axes. Scale functions patterned scale_{aesthetic}_{type}(), {aesthetic} one pairings made mapping part plot. want restrict range values setting new limits axis:  Important: note warnings! Data removed, changes statistical transformation also drops entire species plot! ’ll get means get discussing coordinate systems. also use scale_*() function transform axis. example, want log axis:  Another good use - can rename dimension using scale_*() function. Like :  Note distinction discrete continuous types, third element scale_{aesthetic}_{type}(). discrete variable mapped one axes can transform using scale_{aesthetic}_discrete(). Attempting use scale_{aesthetic}_continuous() like previous example generate error: Finally, can use scale_*() functions assign new representations aesthetic mappings axes. instance, can use scale_*() functions change size, shape colour values used represent specific values underlying data. colour scale, means can assign different colours mapped groups:  , can use Cesar Australia colour palettes using one custom functions included seizer:  Note use scale_colour_cesar_d() discrete colour palette, colour mapped character variable. map colour continuous variable, sepal width, need use appropriate function, scale_colour_cesar_c().  Mind warning popped - refers colour aesthetic dropped ggplot2::geom_smooth() meaningless assign continuous colour mapping geom. One important thing note - include one colour scale*. However, another aesthetic mapping assigns colours - fill. difference colour refers outlines, fill , well, fills. geoms fill values - example lines, points, one dimnensional. - example, polygons like confidence intervals around ggplot2::geom_smooth(). , can assign Species fill colour-coded species also assigning colours different values third variable, sepal width. * unless use ggnewscale package  truly see difference colour fill best look geom . Compare :  :  One final note colour - can also assign colours geoms without mapping variables. example, just want change colour lines ’re blue, can assigning value colour argument ggplot2::geom_smooth() outside ggplot2::aes() function (example use ancient_lavastone, colour included seizer package):","code":"p + scale_y_continuous(limits = c(4, 7)) #> `geom_smooth()` using formula = 'y ~ x' #> Warning: Removed 61 rows containing non-finite outside the scale range #> (`stat_smooth()`). #> Warning: Removed 61 rows containing missing values or values outside the scale range #> (`geom_point()`). p + scale_y_continuous(transform = \"log\") #> `geom_smooth()` using formula = 'y ~ x' p + scale_x_continuous(name = \"New name\") #> `geom_smooth()` using formula = 'y ~ x' ggplot(iris, aes(x = Species, y = Petal.Length)) + geom_point() + scale_x_continuous() #> Error in `scale_x_continuous()`: #> ! Discrete values supplied to continuous scale. #> ℹ Example values: setosa, setosa, setosa, setosa, and setosa p + scale_colour_manual(values = c(\"red\",\"blue\",\"purple\")) #> `geom_smooth()` using formula = 'y ~ x' p + scale_colour_cesar_d() #> `geom_smooth()` using formula = 'y ~ x' p <- ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, colour = Sepal.Width)) + geom_point() + geom_smooth(method = \"lm\")  p + scale_colour_cesar_c(palette = \"galliano_c\") #> `geom_smooth()` using formula = 'y ~ x' #> Warning: The following aesthetics were dropped during statistical transformation: #> colour. #> ℹ This can happen when ggplot fails to infer the correct grouping structure in #>   the data. #> ℹ Did you forget to specify a `group` aesthetic or to convert a numerical #>   variable into a factor? p <- ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, colour = Sepal.Width, fill = Species)) + geom_point() + geom_smooth(method = \"lm\")  p + scale_colour_cesar_c(palette = \"galliano_c\") + scale_fill_cesar_d() #> `geom_smooth()` using formula = 'y ~ x' #> Warning: The following aesthetics were dropped during statistical transformation: #> colour. #> ℹ This can happen when ggplot fails to infer the correct grouping structure in #>   the data. #> ℹ Did you forget to specify a `group` aesthetic or to convert a numerical #>   variable into a factor? ggplot(iris, aes(x = Species, y = Petal.Length, colour = Species)) + geom_boxplot() ggplot(iris, aes(x = Species, y = Petal.Length, fill = Species)) + geom_boxplot() p <- ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, colour = Sepal.Width, fill = Species)) + geom_point() + geom_smooth(colour = ancient_lavastone, method = \"lm\") + scale_colour_cesar_c(palette = \"galliano_c\") + scale_fill_cesar_d()  p #> `geom_smooth()` using formula = 'y ~ x'"},{"path":"https://cesaraustralia.github.io/seizer/articles/ggplot2-tutorial.html","id":"facets","dir":"Articles","previous_headings":"The grammar of graphics","what":"5. Facets","title":"ggplot2 Tutorial","text":"Ok, ’re starting get close final product. now discuss facets, way dividing plot subplots using subsets data, defined variables given column. ggplot2::facet_*() functions can accept mapping variables formula form y ~ x y represents variable coded rows (value displayed separate row), x variable coded columns (value displayed separate column). can omit either y x just want subplots across columns rows, respectively. example, want divide plot subplot species next one another (separate columns):  Note three facets shared ranges axes. can sometimes useful, want easily compare one group another. cases, may informative - instance, range values one group large variation another masked . can sort see something like happen species setosa, subplot empty space. can get around using scales argument facet_*() function. can free one axes passing scales = \"free_x\", scales = \"free_y\" scales = \"free\", essentially changes scale parameters individual facets based data range group data subset:","code":"p + facet_wrap(~ Species) #> `geom_smooth()` using formula = 'y ~ x' p <- p + facet_wrap(~ Species, scales = \"free\")  p #> `geom_smooth()` using formula = 'y ~ x'"},{"path":"https://cesaraustralia.github.io/seizer/articles/ggplot2-tutorial.html","id":"coordinates","dir":"Articles","previous_headings":"The grammar of graphics","what":"6. Coordinates","title":"ggplot2 Tutorial","text":"final component coordinate system. define position aesthetics (x y) interpreted displayed. basically two options* - Cartesian (default), polar. Basically, Cartesian coordinate system x y axes perpendicular. polar system, point defined radial coordinate (distance centre) angular coordinate (azimuth). Sometimes data vis require polar coordinates (e.g., pie chart), likely never worry . want see happens use polar coordinate system ggplot2: * unless ’re creating maps, case coord_sf gets picture  Looks cool eh? Pretty nonsensical data vis perspective, can see happened - Petal.Length become axis along radius (radial coordinate) Sepal.Length become azimuth (angular coordinate). Anyway, main use get playing coordinates want zoom particular parts data. Remember changed limits axis scale? :  ’s happens something similar using function ggplot2::coord_cartesian():  See difference green line? goes back warnings mentioned changing range axis using scale_*() function. scale transformation. ’re telling ggplot2 consider data within range defined scale_*() function - regression function underlying ggplot2::geom_smooth() uses data within range calculate trend line. Coordinates, however, change data displayed, anything calculated. gives us real zoom , without actually changing data underlying plot.","code":"p + coord_polar() #> `geom_smooth()` using formula = 'y ~ x' ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, colour = Species)) + geom_point() + geom_smooth(method = \"lm\") + scale_y_continuous(limits = c(4, 7)) #> `geom_smooth()` using formula = 'y ~ x' #> Warning: Removed 61 rows containing non-finite outside the scale range #> (`stat_smooth()`). #> Warning: Removed 61 rows containing missing values or values outside the scale range #> (`geom_point()`). ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, colour = Species)) + geom_point() + geom_smooth(method = \"lm\") + coord_cartesian(ylim = c(4, 7)) #> `geom_smooth()` using formula = 'y ~ x'"},{"path":"https://cesaraustralia.github.io/seizer/articles/ggplot2-tutorial.html","id":"theme","dir":"Articles","previous_headings":"The grammar of graphics","what":"7. Theme","title":"ggplot2 Tutorial","text":"another important way play around ggplot2 objects. ggplot2::theme() controls static elements plot - basically anything looks isn’t controlled underlying data. can things like font size labels, width grid lines, background colour, etc. example, want get rid legend ’s simple running:  actually important component data vis, since can large impact visually appealing neat plot looks. Otherwise good data vis can fail plot comes looking cluttered, static elements can lot . company team perspective, can also standardise plots distinct visual style reinforces brand identity. Unfortunately, powerful important, ggplot2::theme() also complicated. lot parts can customise. , save trouble, seizer comes , inbuilt theme_cesar() function makes figure look nice tidy line Cesar Australia style guide!  ’ve almost recreated figure. one thing ’re missing labels - can change using scale_*() ggplot2::theme() functions, can also use handy ggplot2::labs() function. Note can use add titles susbtitles, also change names existing axes /aesthetic mappings.  go! now successfully recreated figure, using distinct stages, apart Coordinates leave default values:","code":"p + theme(legend.position = \"none\") #> `geom_smooth()` using formula = 'y ~ x' p <- p + theme_cesar()  p #> `geom_smooth()` using formula = 'y ~ x' p <- p + labs(title = \"This is a title\", subtitle = \"This is a subtitle\")  p #> `geom_smooth()` using formula = 'y ~ x' ggplot(iris, # 1. Data        aes(x = Sepal.Length, y = Petal.Length, colour = Sepal.Width, fill = Species)) + # 2. Mapping   geom_point() + geom_smooth(colour = ancient_lavastone, method = \"lm\") + # 3. Layers   scale_colour_cesar_c(palette = \"galliano_c\") + scale_fill_cesar_d() + # 4. Scales   facet_wrap(~ Species, scales = \"free\") + # 5. Facets   theme_cesar() + # 7. Theme   labs(title = \"This is a title\", subtitle = \"This is a subtitle\")"},{"path":"https://cesaraustralia.github.io/seizer/articles/ggplot2-tutorial.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further reading","title":"ggplot2 Tutorial","text":"Well done! now well versed basics ggplot2 able build plots scratch. However, feel like need help, just want delve deeper, can explore following resources: ggplot2: Get started Complete ggplot2 Tutorial layered grammar graphics Comprehensive Guide Grammar Graphics Effective Visualization Multi-dimensional Data","code":""},{"path":"https://cesaraustralia.github.io/seizer/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alex Slavenko. Author, maintainer.","code":""},{"path":"https://cesaraustralia.github.io/seizer/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Slavenko (2025). seizer: Seize Data Vis R Reins!. R package version 0.0.2, https://github.com/alexsla/seizer.","code":"@Manual{,   title = {seizer: Seize Data Vis in R by the Reins!},   author = {Alex Slavenko},   year = {2025},   note = {R package version 0.0.2},   url = {https://github.com/alexsla/seizer}, }"},{"path":"https://cesaraustralia.github.io/seizer/index.html","id":"seizer-","dir":"","previous_headings":"","what":"Seize Data Vis in R by the Reins!","title":"Seize Data Vis in R by the Reins!","text":"seizer package designed make data visualisation quick, easy consistent Cesar staff. package contains functions fit general ggplot2 syntax, using can make sure figures always look adhere Cesar Australia style guide. new ggplot2, just need refresher, read ggplot2 Tutorial articles tab.","code":""},{"path":"https://cesaraustralia.github.io/seizer/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Seize Data Vis in R by the Reins!","text":"seizer can installed running following code: may asked update packages, existing versions installed computer old. Updating may cause compatibility issues old code, suggest skipping updates first install attempt. package works fine, ’s nothing worry . installation fails, try update required packages.","code":"# install package from GitHub require(devtools) devtools::install_github(\"cesaraustralia/seizer\")"},{"path":"https://cesaraustralia.github.io/seizer/index.html","id":"using-seizer","dir":"","previous_headings":"","what":"Using seizer","title":"Seize Data Vis in R by the Reins!","text":"seizer built work neatly ggplot2. familiar ggplot2 syntax, using package simple. idea build figures usually ggplot2. , can use supplied functions seizer transform figures consistent theme. ggplot2 figure, includes pretty much everything might include figure: aesthetics, mappings, titles, subtitles, legends, facets, etc. plot rendered default ggplot2 settings:  Now, just add theme_cesar() function transform plot, using theme elements designed fit data visualisation principles Cesar Australia style guide:  Notice “static” plot elements changes (colours, linewidths fonts labels, gridlines, backgrounds, etc.), colours actually mapped onto data using ggplot2::aes() function remained unchanged default values. might recall order change ggplot2 syntax need use scale_*() family functions. seizer comes family scale_*_cesar_*() functions, allow map Cesar Australia colour palettes onto figures:  next section contains information colour palettes use . may want drop static elements plot - specifically, legend, grid lines, axis tick labels axis titles. can bit cumbersome ggplot2 requires play around many possible ggplot2::theme() elements. save trouble, seizer drop_*() family functions, pass relevant arguments ggplot2::theme() hood. want remove legend, simply add drop_legend() plot:  drop_*() functions work similarly, need specify axis want drop element . options x, y . example, want drop grid lines x axis, drop tick labels y axis, drop titles , run following code:  final function use cesar_save(). wrapper function around ggplot2::ggsave() function may come across, allowing user save plot assigining values width, height, dpi, etc. However, function comes several pre-determined presets generate outputs. match size resolution saved plot destination format. five presets: twitter, web, linkedin, facebook print. preset specified, function reverts user-provided values , none provided, ggplot2::ggsave() default values determined monitor size resolution. also optional argument, logo, can used add Cesar logo top right plot setting logo = TRUE. turned default. can also specify destination pathway using path argument - default, plot saved working directory. Finally, export defaults .png format accepted format specified filename (e.g., “plot.jpeg”). example, wanted save plot web format (72dpi) logo, run following code: automatically exports last rendered plot working directory selected presets.","code":"p <- iris %>%   ggplot(aes(x = Sepal.Length, y = Petal.Length, colour = Sepal.Width, fill = Species)) + geom_point() + geom_smooth(method = \"lm\") + facet_wrap(~Species, scales = \"free\") + labs(title = \"This is a title\", subtitle = \"This is a subtitle\")  p #> `geom_smooth()` using formula = 'y ~ x' p <-   p + theme_cesar()  p #> `geom_smooth()` using formula = 'y ~ x' p <-   iris %>% ggplot(aes(x = Sepal.Length, y = Petal.Length, colour = Sepal.Width, fill = Species)) + geom_point() + geom_smooth(colour = ancient_lavastone, method = \"lm\") + facet_wrap(~Species, scales = \"free\") + labs(title = \"This is a title\", subtitle = \"This is a subtitle\") +   theme_cesar() + scale_colour_cesar_c(palette = \"galliano_c\") + scale_fill_cesar_d()  p #> `geom_smooth()` using formula = 'y ~ x' p + drop_legend() #> `geom_smooth()` using formula = 'y ~ x' p +   drop_grid(\"x\") +   drop_labels(\"y\") +   drop_titles(\"both\") #> `geom_smooth()` using formula = 'y ~ x' cesar_save(filename = \"cesar_web.png\", preset = \"web\", logo = T)"},{"path":"https://cesaraustralia.github.io/seizer/index.html","id":"cesar-australia-colour-palettes","dir":"","previous_headings":"","what":"Cesar Australia colour palettes","title":"Seize Data Vis in R by the Reins!","text":"Finally, seizer contains variety colour palettes can used data vis. derived colours Cesar Australia style guide, slight modifications hue brightness values make suitable data visualisation. explained , can easily plugged ggplot2 objects using scale_*_cesar_*() family functions. However, can also access palettes directly using cesar_palettes see available palettes pull individual colours palettes - instance want use base R figure.","code":""},{"path":"https://cesaraustralia.github.io/seizer/index.html","id":"discrete-palettes","dir":"","previous_headings":"Cesar Australia colour palettes","what":"Discrete palettes","title":"Seize Data Vis in R by the Reins!","text":"seizer includes two discrete palettes, suitable mapping onto unordered categorical variables:  include 7 colours - groups data, can use helper function (see ) either interpolate additional intermediate colours discretise continuous colour scale (either sequential diverging). latter option may useful ordered categorical variables, note colours may end similar discern groups.","code":""},{"path":"https://cesaraustralia.github.io/seizer/index.html","id":"sequential-palettes","dir":"","previous_headings":"Cesar Australia colour palettes","what":"Sequential palettes","title":"Seize Data Vis in R by the Reins!","text":"seizer includes seven sequential palettes, suitable mapping onto continuous variables. based “primary” Cesar colours, vary brightness values around single base hue. seven palettes :","code":""},{"path":"https://cesaraustralia.github.io/seizer/index.html","id":"diverging-palettes","dir":"","previous_headings":"Cesar Australia colour palettes","what":"Diverging palettes","title":"Seize Data Vis in R by the Reins!","text":"seizer includes four diverging palettes, suitable mapping onto continuous variables. especially useful visualising data distinct, meaningful midpoint - example, negative vs. positive values, centered around zero. Alternatively, biologically meaningful midpoint needs emphasised. four palettes :  Please note diverging palettes especially, care given use palettes colour blind friendly. palettes discernible people either protanopia deuteranopia-type colour blindness, gold_teal_d teal_orange_d may best ones use.","code":""},{"path":"https://cesaraustralia.github.io/seizer/index.html","id":"helper-functions","dir":"","previous_headings":"Cesar Australia colour palettes","what":"Helper functions","title":"Seize Data Vis in R by the Reins!","text":"helper function included seizer generate colour palettes user-defined length. cesar_rampr(), accepts arguments number colours requested, colour palette (use names(cesar_palettes) view available palettes), alpha value transparency, logical argument reverse palette, requested. generates vector colours, can used manually plotting. discrete palette selected, function simply returns colours palette order. n > 7 function perform linear interpolation find intermediate colours. continuous palette selected, function performs linear interpolation discretise palette return several discrete values length n.  Finally, two additional helper functions included, cesar_pal() cesar_gradient_n_pal(). bit complicated, serve wrappers around cesar_rampr() facilitate use scale_*_cesar_*() functions. words - can safely ignore , feel free play around ’d like.","code":"new_pal <- cesar_rampr(n = 15, pal_name = \"oxford_blue_c\", alpha = .7)  new_pal2 <- cesar_rampr(n = 4, pal_name = \"cesar_light\", reverse = T)  new_pal3 <- cesar_rampr(n = 10, pal_name = \"cesar\")  plot(as_palette(list(new_pal, new_pal2, new_pal3)))"},{"path":"https://cesaraustralia.github.io/seizer/reference/adobe_avenue.html","id":null,"dir":"Reference","previous_headings":"","what":"adobe avenue — adobe_avenue","title":"adobe avenue — adobe_avenue","text":"Adobe avenue","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/adobe_avenue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"adobe avenue — adobe_avenue","text":"","code":"adobe_avenue"},{"path":"https://cesaraustralia.github.io/seizer/reference/adobe_avenue.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"adobe avenue — adobe_avenue","text":"object class character length 1.","code":""},{"path":[]},{"path":"https://cesaraustralia.github.io/seizer/reference/ancient_lavastone.html","id":null,"dir":"Reference","previous_headings":"","what":"ancient lavastone — ancient_lavastone","title":"ancient lavastone — ancient_lavastone","text":"Ancient lavastone","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/ancient_lavastone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ancient lavastone — ancient_lavastone","text":"","code":"ancient_lavastone"},{"path":"https://cesaraustralia.github.io/seizer/reference/ancient_lavastone.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ancient lavastone — ancient_lavastone","text":"object class character length 1.","code":""},{"path":[]},{"path":"https://cesaraustralia.github.io/seizer/reference/cesar_gradient_n_pal.html","id":null,"dir":"Reference","previous_headings":"","what":"Cesar gradient palette — cesar_gradient_n_pal","title":"Cesar gradient palette — cesar_gradient_n_pal","text":"Helper function incorporate Cesar colors scale fills","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/cesar_gradient_n_pal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cesar gradient palette — cesar_gradient_n_pal","text":"","code":"cesar_gradient_n_pal(   palette = \"cesar_green_c\",   alpha = 1,   reverse = T,   na.color = NA )"},{"path":"https://cesaraustralia.github.io/seizer/reference/cesar_gradient_n_pal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cesar gradient palette — cesar_gradient_n_pal","text":"palette Choose 'cesar_palettes' list alpha sets transparency color reverse true, reverses order palette na.color color NA values","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/cesar_green.html","id":null,"dir":"Reference","previous_headings":"","what":"cesar green — cesar_green","title":"cesar green — cesar_green","text":"Cesar green","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/cesar_green.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cesar green — cesar_green","text":"","code":"cesar_green"},{"path":"https://cesaraustralia.github.io/seizer/reference/cesar_green.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"cesar green — cesar_green","text":"object class character length 1.","code":""},{"path":[]},{"path":"https://cesaraustralia.github.io/seizer/reference/cesar_pal.html","id":null,"dir":"Reference","previous_headings":"","what":"Cesar palette with ramped colors — cesar_pal","title":"Cesar palette with ramped colors — cesar_pal","text":"Helper function incorporate Cesar colors scale fills","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/cesar_pal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cesar palette with ramped colors — cesar_pal","text":"","code":"cesar_pal(palette = \"cesar\", alpha = 1, reverse = FALSE)"},{"path":"https://cesaraustralia.github.io/seizer/reference/cesar_pal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cesar palette with ramped colors — cesar_pal","text":"palette Choose 'cesar_palettes' list alpha sets transparency color reverse true, reverses order palette","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/cesar_palettes.html","id":null,"dir":"Reference","previous_headings":"","what":"List of Cesar Colour Palettes — cesar_palettes","title":"List of Cesar Colour Palettes — cesar_palettes","text":"Sets colour palettes use Cesar Australia data visualisations. Colours stored named list. Use palette name position call colours. Colour sets stored name first colour: Calling cesar_palettes$cesar return seven color palette Cesar green base. Calling cesar_palettes$cesar_green_c return interpolated ramp 10 colors Cesar green.","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/cesar_palettes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of Cesar Colour Palettes — cesar_palettes","text":"","code":"cesar_palettes"},{"path":"https://cesaraustralia.github.io/seizer/reference/cesar_palettes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"List of Cesar Colour Palettes — cesar_palettes","text":"object class list length 13.","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/cesar_palettes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of Cesar Colour Palettes — cesar_palettes","text":"","code":"# List names of palettes available names(cesar_palettes) #>  [1] \"cesar\"          \"cesar_light\"    \"cesar_green_c\"  \"hobgoblin_c\"    #>  [5] \"warm_grey_c\"    \"oxford_blue_c\"  \"rufous_c\"       \"galliano_c\"     #>  [9] \"neutral_c\"      \"green_brown_d\"  \"teal_orange_d\"  \"orange_green_d\" #> [13] \"gold_teal_d\"    \"red_blue_d\"      scales::show_col(cesar_palettes$cesar)  scales::show_col(cesar_palettes$gold_teal_d)  scales::show_col(cesar_palettes$warm_grey_c)"},{"path":"https://cesaraustralia.github.io/seizer/reference/cesar_rampr.html","id":null,"dir":"Reference","previous_headings":"","what":"Palette interpolation — cesar_rampr","title":"Palette interpolation — cesar_rampr","text":"Generate palette linear interpolation. discrete palette selected, colors recycled length desired vector.","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/cesar_rampr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Palette interpolation — cesar_rampr","text":"","code":"cesar_rampr(pal_name = \"cesar\", n, alpha = 1, reverse = FALSE)"},{"path":"https://cesaraustralia.github.io/seizer/reference/cesar_rampr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Palette interpolation — cesar_rampr","text":"pal_name name palette n number interpolation points alpha sets transparency color reverse true, reverses order","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/cesar_rampr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Palette interpolation — cesar_rampr","text":"Chooses palette use ggplot2","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/cesar_rampr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Palette interpolation — cesar_rampr","text":"","code":"#View different interpolations of palettes cesar_rampr(\"cesar_green_c\") %>%  scales::show_col()  cesar_rampr(\"cesar_green_c\", n = 10) %>% scales::show_col() cesar_rampr(\"cesar_green_c\", n = 100) #>   [1] \"#171F00\" \"#1A2300\" \"#1D2800\" \"#212C00\" \"#243100\" \"#283600\" \"#2B3A00\" #>   [8] \"#2F3F00\" \"#324400\" \"#364800\" \"#394D00\" \"#3D5200\" \"#405600\" \"#435B00\" #>  [15] \"#475F00\" \"#4A6400\" \"#4E6800\" \"#516D00\" \"#557100\" \"#587600\" \"#5C7A00\" #>  [22] \"#5F7F00\" \"#638401\" \"#668801\" \"#698D01\" \"#6D9101\" \"#709601\" \"#749B01\" #>  [29] \"#779F01\" \"#7BA401\" \"#7EA901\" \"#82AD01\" \"#85B201\" \"#89B701\" \"#8CBB01\" #>  [36] \"#8FC001\" \"#93C401\" \"#96C901\" \"#9ACE01\" \"#9DD201\" \"#A1D701\" \"#A4DC01\" #>  [43] \"#A8E001\" \"#ABE501\" \"#AFEA01\" \"#B1EB03\" \"#B3ED06\" \"#B5EF09\" \"#B7F10C\" #>  [50] \"#B9F30F\" \"#BBF411\" \"#BDF614\" \"#BFF817\" \"#C1FA1A\" \"#C3FC1D\" \"#C6FE20\" #>  [57] \"#C7FE24\" \"#C8FE29\" \"#C9FE2D\" \"#CAFE32\" \"#CBFE37\" \"#CDFE3B\" \"#CEFE40\" #>  [64] \"#CFFE45\" \"#D0FE49\" \"#D1FE4E\" \"#D3FE53\" \"#D4FE57\" \"#D5FE5C\" \"#D6FE60\" #>  [71] \"#D7FE65\" \"#D8FE6A\" \"#DAFE6E\" \"#DBFE73\" \"#DCFE78\" \"#DDFE7C\" \"#DEFE81\" #>  [78] \"#E0FE86\" \"#E1FE8A\" \"#E2FE8F\" \"#E3FE93\" \"#E4FE98\" \"#E5FE9C\" \"#E7FEA1\" #>  [85] \"#E8FEA5\" \"#E9FEAA\" \"#EAFEAE\" \"#EBFEB3\" \"#EDFFB8\" \"#EEFFBC\" \"#EFFFC1\" #>  [92] \"#F0FFC5\" \"#F1FFCA\" \"#F2FFCF\" \"#F4FFD3\" \"#F5FFD8\" \"#F6FFDD\" \"#F7FFE1\" #>  [99] \"#F8FFE6\" \"#FAFFEB\""},{"path":"https://cesaraustralia.github.io/seizer/reference/cesar_save.html","id":null,"dir":"Reference","previous_headings":"","what":"Save Plot — cesar_save","title":"Save Plot — cesar_save","text":"Wrapper around ggplot2::ggsave Cesar standards","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/cesar_save.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save Plot — cesar_save","text":"","code":"cesar_save(   filename,   plot = last_plot(),   path = NULL,   preset = NULL,   logo = FALSE,   scale = 1,   width = NA,   height = NA,   units = c(\"in\", \"cm\", \"mm\", \"px\"),   dpi = 300,   ... )"},{"path":"https://cesaraustralia.github.io/seizer/reference/cesar_save.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save Plot — cesar_save","text":"filename File name create disk, png unless otherwise specified plot Plot save, defaults last plot displayed. path Path directory save plot : path filename combined create fully qualified file name. Defaults working directory. preset Passes pre-determined values arguments scale, width, height dpi based type output visualisation required . Accepts one c(\"twitter\", \"web\", \"linkedin\", \"facebook\", \"print\") overwrites user-provided values. NULL (default) inherits ggplot2::ggsave default values. logo TRUE add Cesar logo top right. Defaults FALSE ... additional arguments pass ggsave","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/cesar_save.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save Plot — cesar_save","text":"exports file Cesar dimensions","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/cesar_save.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save Plot — cesar_save","text":"","code":"if (FALSE) { # \\dontrun{ library(ggplot2) ggplot(iris, aes(Sepal.Length, y = Sepal.Width, colour = Species)) +   geom_point() + theme_cesar() #default save cesar_save(\"out/sepal.png\") #defaults to png if not specified (.pdf, .svg, .jpeg) cesar_save(\"out/sepal\") #change the preset cesar_save(\"out/sepal.jpeg\", preset = \"twitter\")  } # }"},{"path":"https://cesaraustralia.github.io/seizer/reference/color_caption.html","id":null,"dir":"Reference","previous_headings":"","what":"Color caption default — color_caption","title":"Color caption default — color_caption","text":"sets color caption","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/color_caption.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Color caption default — color_caption","text":"","code":"color_caption"},{"path":"https://cesaraustralia.github.io/seizer/reference/color_caption.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Color caption default — color_caption","text":"object class character length 1.","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/color_gridline.html","id":null,"dir":"Reference","previous_headings":"","what":"Gridline color default — color_gridline","title":"Gridline color default — color_gridline","text":"sets gridline colors","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/color_gridline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gridline color default — color_gridline","text":"","code":"color_gridline"},{"path":"https://cesaraustralia.github.io/seizer/reference/color_gridline.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Gridline color default — color_gridline","text":"object class character length 1.","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/color_plot_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot colour default — color_plot_text","title":"Plot colour default — color_plot_text","text":"sets plot color text","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/color_plot_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot colour default — color_plot_text","text":"","code":"color_plot_text"},{"path":"https://cesaraustralia.github.io/seizer/reference/color_plot_text.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Plot colour default — color_plot_text","text":"object class character length 1.","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/color_strip_background.html","id":null,"dir":"Reference","previous_headings":"","what":"Strip background color default — color_strip_background","title":"Strip background color default — color_strip_background","text":"sets strip background colors","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/color_strip_background.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Strip background color default — color_strip_background","text":"","code":"color_strip_background"},{"path":"https://cesaraustralia.github.io/seizer/reference/color_strip_background.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Strip background color default — color_strip_background","text":"object class character length 1.","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/color_strip_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Strip text color default — color_strip_text","title":"Strip text color default — color_strip_text","text":"sets strip text colors","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/color_strip_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Strip text color default — color_strip_text","text":"","code":"color_strip_text"},{"path":"https://cesaraustralia.github.io/seizer/reference/color_strip_text.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Strip text color default — color_strip_text","text":"object class character length 1.","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/color_subtitle.html","id":null,"dir":"Reference","previous_headings":"","what":"Subtitle colour default — color_subtitle","title":"Subtitle colour default — color_subtitle","text":"sets color caption","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/color_subtitle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subtitle colour default — color_subtitle","text":"","code":"color_subtitle"},{"path":"https://cesaraustralia.github.io/seizer/reference/color_subtitle.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Subtitle colour default — color_subtitle","text":"object class character length 1.","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/color_title.html","id":null,"dir":"Reference","previous_headings":"","what":"Title colour default — color_title","title":"Title colour default — color_title","text":"sets title color","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/color_title.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title colour default — color_title","text":"","code":"color_title"},{"path":"https://cesaraustralia.github.io/seizer/reference/color_title.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Title colour default — color_title","text":"object class character length 1.","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/dark_grey.html","id":null,"dir":"Reference","previous_headings":"","what":"dark grey — dark_grey","title":"dark grey — dark_grey","text":"Dark grey","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/dark_grey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dark grey — dark_grey","text":"","code":"dark_grey"},{"path":"https://cesaraustralia.github.io/seizer/reference/dark_grey.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"dark grey — dark_grey","text":"object class character length 1.","code":""},{"path":[]},{"path":"https://cesaraustralia.github.io/seizer/reference/defense_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"defense matrix — defense_matrix","title":"defense matrix — defense_matrix","text":"Defense matrix","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/defense_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"defense matrix — defense_matrix","text":"","code":"defense_matrix"},{"path":"https://cesaraustralia.github.io/seizer/reference/defense_matrix.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"defense matrix — defense_matrix","text":"object class character length 1.","code":""},{"path":[]},{"path":"https://cesaraustralia.github.io/seizer/reference/drop_elements.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop static elements from plots — drop_legend","title":"Drop static elements from plots — drop_legend","text":"Drop static theme element ggplot object","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/drop_elements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop static elements from plots — drop_legend","text":"","code":"drop_legend(axis = NULL)  drop_grid(axis = NULL)  drop_labels(axis = NULL)  drop_titles(axis = NULL)"},{"path":"https://cesaraustralia.github.io/seizer/reference/drop_elements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop static elements from plots — drop_legend","text":"axis either \"x\", \"y\" \"\"","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/drop_elements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop static elements from plots — drop_legend","text":"","code":"library(ggplot2) p <- ggplot(iris, aes(Sepal.Length, y = Sepal.Width, colour = Species)) +  geom_point() + theme_cesar()  p + drop_legend()   p + drop_grid(\"x\")   p + drop_labels(\"y\")   p + drop_titles(\"both\")"},{"path":"https://cesaraustralia.github.io/seizer/reference/galliano.html","id":null,"dir":"Reference","previous_headings":"","what":"galliano — galliano","title":"galliano — galliano","text":"Galliano","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/galliano.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"galliano — galliano","text":"","code":"galliano"},{"path":"https://cesaraustralia.github.io/seizer/reference/galliano.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"galliano — galliano","text":"object class character length 1.","code":""},{"path":[]},{"path":"https://cesaraustralia.github.io/seizer/reference/gold_bullion.html","id":null,"dir":"Reference","previous_headings":"","what":"gold bullion — gold_bullion","title":"gold bullion — gold_bullion","text":"Gold bullion","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/gold_bullion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"gold bullion — gold_bullion","text":"","code":"gold_bullion"},{"path":"https://cesaraustralia.github.io/seizer/reference/gold_bullion.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"gold bullion — gold_bullion","text":"object class character length 1.","code":""},{"path":[]},{"path":"https://cesaraustralia.github.io/seizer/reference/hobgoblin.html","id":null,"dir":"Reference","previous_headings":"","what":"hobgoblin — hobgoblin","title":"hobgoblin — hobgoblin","text":"Hobgoblin","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/hobgoblin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hobgoblin — hobgoblin","text":"","code":"hobgoblin"},{"path":"https://cesaraustralia.github.io/seizer/reference/hobgoblin.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"hobgoblin — hobgoblin","text":"object class character length 1.","code":""},{"path":[]},{"path":"https://cesaraustralia.github.io/seizer/reference/ice_cold.html","id":null,"dir":"Reference","previous_headings":"","what":"ice cold — ice_cold","title":"ice cold — ice_cold","text":"Ice cold","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/ice_cold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ice cold — ice_cold","text":"","code":"ice_cold"},{"path":"https://cesaraustralia.github.io/seizer/reference/ice_cold.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ice cold — ice_cold","text":"object class character length 1.","code":""},{"path":[]},{"path":"https://cesaraustralia.github.io/seizer/reference/key_lime.html","id":null,"dir":"Reference","previous_headings":"","what":"key lime — key_lime","title":"key lime — key_lime","text":"Key lime","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/key_lime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"key lime — key_lime","text":"","code":"key_lime"},{"path":"https://cesaraustralia.github.io/seizer/reference/key_lime.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"key lime — key_lime","text":"object class character length 1.","code":""},{"path":[]},{"path":"https://cesaraustralia.github.io/seizer/reference/light_grey.html","id":null,"dir":"Reference","previous_headings":"","what":"light grey — light_grey","title":"light grey — light_grey","text":"Light grey","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/light_grey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"light grey — light_grey","text":"","code":"light_grey"},{"path":"https://cesaraustralia.github.io/seizer/reference/light_grey.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"light grey — light_grey","text":"object class character length 1.","code":""},{"path":[]},{"path":"https://cesaraustralia.github.io/seizer/reference/mid_grey.html","id":null,"dir":"Reference","previous_headings":"","what":"mid grey — mid_grey","title":"mid grey — mid_grey","text":"Mid grey","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/mid_grey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mid grey — mid_grey","text":"","code":"mid_grey"},{"path":"https://cesaraustralia.github.io/seizer/reference/mid_grey.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"mid grey — mid_grey","text":"object class character length 1.","code":""},{"path":[]},{"path":"https://cesaraustralia.github.io/seizer/reference/oxford_blue.html","id":null,"dir":"Reference","previous_headings":"","what":"oxford blue — oxford_blue","title":"oxford blue — oxford_blue","text":"Oxford blue","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/oxford_blue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"oxford blue — oxford_blue","text":"","code":"oxford_blue"},{"path":"https://cesaraustralia.github.io/seizer/reference/oxford_blue.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"oxford blue — oxford_blue","text":"object class character length 1.","code":""},{"path":[]},{"path":"https://cesaraustralia.github.io/seizer/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::[\\%>\\%][magrittr::pipe] details.","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://cesaraustralia.github.io/seizer/reference/rufous.html","id":null,"dir":"Reference","previous_headings":"","what":"rufous — rufous","title":"rufous — rufous","text":"Rufous","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/rufous.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rufous — rufous","text":"","code":"rufous"},{"path":"https://cesaraustralia.github.io/seizer/reference/rufous.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"rufous — rufous","text":"object class character length 1.","code":""},{"path":[]},{"path":"https://cesaraustralia.github.io/seizer/reference/scale_cesar.html","id":null,"dir":"Reference","previous_headings":"","what":"Cesar colour for ggplot2 — scale_colour_cesar_d","title":"Cesar colour for ggplot2 — scale_colour_cesar_d","text":"Cesar colour ggplot2","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/scale_cesar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cesar colour for ggplot2 — scale_colour_cesar_d","text":"","code":"scale_colour_cesar_d(   name = waiver(),   ...,   alpha = 1,   reverse = FALSE,   palette = \"cesar\",   aesthetics = \"colour\" )  scale_fill_cesar_d(   name = waiver(),   ...,   alpha = 1,   reverse = FALSE,   palette = \"cesar\",   aesthetics = \"fill\" )  scale_colour_cesar_c(   name = waiver(),   ...,   alpha = 1,   reverse = FALSE,   palette = \"cesar_green_c\",   guide = \"colourbar\",   aesthetics = \"colour\",   na.value = \"#AFAFAF\" )  scale_fill_cesar_c(   name = waiver(),   ...,   alpha = 1,   reverse = FALSE,   palette = \"cesar_green_c\",   guide = \"colourbar\",   aesthetics = \"fill\",   na.value = \"#AFAFAF\" )  scale_colour_cesar_b(   name = waiver(),   ...,   alpha = 1,   reverse = FALSE,   palette = \"cesar_green_c\",   guide = \"coloursteps\",   aesthetics = \"colour\",   na.value = \"#AFAFAF\" )  scale_fill_cesar_b(   name = waiver(),   ...,   alpha = 1,   reverse = FALSE,   palette = \"cesar_green_c\",   guide = \"coloursteps\",   aesthetics = \"fill\",   na.value = \"#AFAFAF\" )  scale_colour_cesar_g(   name = waiver(),   ...,   mid = 0,   alpha = 1,   reverse = FALSE,   palette = \"green_brown_d\",   guide = \"colourbar\",   aesthetics = \"colour\",   na.value = \"#AFAFAF\" )  scale_fill_cesar_g(   name = waiver(),   ...,   mid = 0,   alpha = 1,   reverse = FALSE,   palette = \"green_brown_d\",   guide = \"colourbar\",   aesthetics = \"fill\",   na.value = \"#AFAFAF\" )"},{"path":"https://cesaraustralia.github.io/seizer/reference/scale_cesar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cesar colour for ggplot2 — scale_colour_cesar_d","text":"name name scale. Used axis legend title. waiver(), default, name scale taken first mapping used aesthetic. NULL, legend title omitted. ... arguments passed discrete_scale(), continuous_scale(), binned_scale() control name, limits, breaks, labels forth. alpha sets transparency color reverse true, reverses order palette palette Choose 'cesar_palettes' list aesthetics Character string vector character strings listing name(s) aesthetic(s) scale works . can useful, example, apply colour settings colour fill aesthetics time, via aesthetics = c(\"colour\", \"fill\"). guide function used create guide name. See guides() information. na.value Missing values replaced value.","code":""},{"path":[]},{"path":"https://cesaraustralia.github.io/seizer/reference/scale_cesar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cesar colour for ggplot2 — scale_colour_cesar_d","text":"","code":"library(ggplot2)  # Use the cesar palette with discrete data (default) txsamp <- subset(txhousing, city %in%   c(\"Houston\", \"Fort Worth\", \"San Antonio\", \"Dallas\", \"Austin\")) (d <- ggplot(data = txsamp, aes(x = sales, y = median)) +    geom_point(aes(colour = city)))  d + theme_cesar() + scale_colour_cesar_d()   # Change scale label d + theme_cesar() + scale_colour_cesar_d(\"City\\nCenter\")   # Select palette to use from names(cesar_palettes) d + theme_cesar() + scale_colour_cesar_d(palette = \"cesar_light\")  d + theme_cesar() + scale_colour_cesar_d(palette = \"galliano_c\") #> Warning: continuous palette selected and will discretised; consider using one of c(\"cesar\", \"cesar_light\") instead   # scale_fill_cesar_d works just the same as # scale_colour_cesar_d but for fill colours p <- ggplot(txsamp, aes(x = median, fill = city)) +   geom_histogram(position = \"dodge\", binwidth = 15000) p + theme_cesar() + scale_fill_cesar_d()  # the order of colour can be reversed p + theme_cesar() + scale_fill_cesar_d(reverse = T)   # Use cesar_c with continuous data (v <- ggplot(faithfuld) +   geom_tile(aes(waiting, eruptions, fill = density)))  v + theme_cesar() + scale_fill_cesar_c()  v + theme_cesar() + scale_fill_cesar_c(palette = \"hobgoblin_c\")   # Use cesar_b to bin continuous data before mapping v + theme_cesar() + scale_fill_cesar_b()   # Use cesar_g for divergent scales ggplot(faithfuld, aes(waiting, eruptions)) + geom_raster(aes(fill = density)) + scale_fill_cesar_g(mid = 0.02) + theme_cesar()"},{"path":"https://cesaraustralia.github.io/seizer/reference/theme_cesar.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Standard Cesar Plots — theme_cesar","title":"Create Standard Cesar Plots — theme_cesar","text":"function converts ggplot object Cesar theme. default font Inter","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/theme_cesar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Standard Cesar Plots — theme_cesar","text":"","code":"theme_cesar(   font_title,   font_subtitle,   font_plot,   font_caption,   facet_space = 2,   text_scale = 1,   ... )"},{"path":"https://cesaraustralia.github.io/seizer/reference/theme_cesar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Standard Cesar Plots — theme_cesar","text":"font_title font family titles, defaults Inter/Arial font_subtitle font family subtitles, defaults Inter/Arial font_plot font family plot space, defaults Inter/Arial font_caption font family captions, defaults Inter/Arial facet_space controls far apart facets text_scale scalar grow/shrink text defined within ... pass parameters theme already defined within","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/theme_cesar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Standard Cesar Plots — theme_cesar","text":"","code":"library(systemfonts) library(ggplot2) ggplot(iris, aes(Sepal.Length, y = Sepal.Width, colour = Species)) +  geom_point() + theme_cesar()"},{"path":"https://cesaraustralia.github.io/seizer/reference/warm_grey.html","id":null,"dir":"Reference","previous_headings":"","what":"warm grey — warm_grey","title":"warm grey — warm_grey","text":"Warm grey","code":""},{"path":"https://cesaraustralia.github.io/seizer/reference/warm_grey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"warm grey — warm_grey","text":"","code":"warm_grey"},{"path":"https://cesaraustralia.github.io/seizer/reference/warm_grey.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"warm grey — warm_grey","text":"object class character length 1.","code":""},{"path":[]}]
